<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.4.5</version>
    <relativePath/>
  </parent>

  <groupId>com.github.javydreamercsw</groupId>
  <artifactId>all-time-wrestling-rpg</artifactId>
  <version>1.0.0-SNAPSHOT</version>

  <packaging>jar</packaging>
  <name>All Time Wrestling RPG</name>

  <properties>
    <archunit.version>1.4.1</archunit.version>

    <!-- JaCoCo Coverage Properties -->
    <jacoco.coverage.minimum>0.90</jacoco.coverage.minimum>
    <jacoco.integration.coverage.minimum>0.80</jacoco.integration.coverage.minimum>
    <jacoco.unit.coverage.minimum>0.85</jacoco.unit.coverage.minimum>
    <jacoco.version>0.8.13</jacoco.version>
    <java.version>17</java.version>
    <surefireArgLine/>
    <testcontainers.version>1.21.3</testcontainers.version>
    <vaadin.version>24.8.6</vaadin.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-bom</artifactId>
        <version>${vaadin.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
        <version>1.18.38</version>
        <scope>provided</scope>
      </dependency>
      <dependency>
        <groupId>com.github.seratch</groupId>
        <artifactId>notion-sdk-jvm-core</artifactId>
        <version>1.11.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>com.github.seratch</groupId>
      <artifactId>notion-sdk-jvm-core</artifactId>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <!-- Vaadin -->
    <dependency>
      <groupId>com.vaadin</groupId>
      <!-- Replace artifactId with vaadin-core to use only free components -->
      <artifactId>vaadin</artifactId>
    </dependency>
    <dependency>
      <groupId>com.vaadin</groupId>
      <artifactId>vaadin-spring-boot-starter</artifactId>
    </dependency>
    <dependency>
      <groupId>org.vaadin.stefan</groupId>
      <artifactId>fullcalendar2</artifactId>
      <version>6.3.1</version>
    </dependency>

    <!-- Persistence -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jpa</artifactId>
    </dependency>
    <dependency>
      <!-- Replace with the database you will be using in production -->
      <groupId>com.h2database</groupId>
      <artifactId>h2</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.flywaydb</groupId>
      <artifactId>flyway-core</artifactId>
    </dependency>

    <!-- Additional Spring Dependencies -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <optional>true</optional>
    </dependency>

    <!-- AspectJ for Performance Monitoring -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-aop</artifactId>
    </dependency>

    <!-- Testing -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-testcontainers</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.tngtech.archunit</groupId>
      <artifactId>archunit-junit5</artifactId>
      <version>${archunit.version}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <repositories>
    <repository>
      <id>vaadin-addons</id>
      <url>https://maven.vaadin.com/vaadin-addons</url>
    </repository>
  </repositories>

  <build>
    <defaultGoal>spring-boot:run</defaultGoal>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.14.0</version>
        <configuration>
          <encoding>${project.build.sourceEncoding}</encoding>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>1.18.38</version>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>3.5.3</version>
        <configuration>
          <!-- Enable parallel execution for unit tests -->
          <parallel>classes</parallel>
          <threadCount>4</threadCount>
          <perCoreThreadCount>true</perCoreThreadCount>
          <useUnlimitedThreads>false</useUnlimitedThreads>
          <!-- Optimize for faster execution -->
          <forkCount>1</forkCount>
          <reuseForks>true</reuseForks>
          <!-- Include unit tests, exclude integration tests -->
          <includes>
            <include>**/*Test.java</include>
            <include>**/*Tests.java</include>
            <include>**/*TestCase.java</include>
          </includes>
          <excludes>
            <exclude>**/*IT.java</exclude>
            <exclude>**/*IntegrationTest.java</exclude>
          </excludes>
          <!-- JVM arguments for better performance and JaCoCo coverage -->
          <argLine>${surefireArgLine} -Xmx2g
            -XX:+EnableDynamicAgentLoading
            -Djdk.instrument.traceUsage=false</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.18.0</version>
      </plugin>
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>2.44.5</version>
        <configuration>
          <!-- optional: limit format enforcement to just the files changed by this feature branch
              <ratchetFrom>origin/master</ratchetFrom>-->
          <formats>
            <!-- you can define as many formats as you want, each is independent -->
            <format>
              <!-- define the files to apply to -->
              <includes>
                <include>*.md</include>
                <include>.gitignore</include>
              </includes>
              <!-- define the steps to apply to those files -->
              <trimTrailingWhitespace/>
              <endWithNewline/>
              <indent>
                <tabs>true</tabs>
                <spacesPerTab>4</spacesPerTab>
              </indent>
            </format>
          </formats>
          <!-- define a language-specific format -->
          <java>
            <toggleOffOn/>
            <eclipse>
              <version>4.35</version>
              <file>${project.basedir}/eclipse-formatter.xml</file>
            </eclipse>
            <!-- no need to specify files, inferred automatically, but you can if you want -->
            <cleanthat/>
            <!-- apply a specific flavor of google-java-format and reflow long strings -->
            <googleJavaFormat>
              <version>1.27.0</version>
              <style>GOOGLE</style>
              <reflowLongStrings>true</reflowLongStrings>
            </googleJavaFormat>
            <importOrder/>
            <removeUnusedImports/>
            <formatAnnotations/>
            <!--<licenseHeader>
                  <file>${project.build.directory}/test-classes/license.template</file>
                  <delimiter>package</delimiter>
                </licenseHeader>-->
          </java>
          <groovy>
            <!-- These are the defaults, you can override if you want -->
            <includes>
              <include>**/*.groovy</include>
            </includes>
            <importOrder/>
          </groovy>
          <pom>
            <!-- These are the defaults, you can override if you want -->
            <includes>
              <include>pom.xml</include>
            </includes>
            <sortPom>
              <encoding>UTF-8</encoding>
              <!-- The encoding of the pom files -->
              <lineSeparator>${line.separator}</lineSeparator>
              <!-- line separator to use -->
              <expandEmptyElements>false</expandEmptyElements>
              <!-- Should empty elements be expanded-->
              <spaceBeforeCloseEmptyElement>false</spaceBeforeCloseEmptyElement>
              <!-- Should a space be added inside self-closing elements-->
              <keepBlankLines>true</keepBlankLines>
              <!-- Keep empty lines -->
              <nrOfIndentSpace>2</nrOfIndentSpace>
              <!-- Indentation -->
              <indentBlankLines>false</indentBlankLines>
              <!-- Should empty lines be indented -->
              <indentSchemaLocation>false</indentSchemaLocation>
              <!-- Should schema locations be indented -->
              <predefinedSortOrder>recommended_2008_06</predefinedSortOrder>
              <!-- Sort order of elements: https://github.com/Ekryd/sortpom/wiki/PredefinedSortOrderProfiles-->
              <sortOrderFile/>
              <!-- Custom sort order of elements: https://raw.githubusercontent.com/Ekryd/sortpom/master/sorter/src/main/resources/custom_1.xml -->
              <sortDependencies/>
              <!-- Sort dependencies: https://github.com/Ekryd/sortpom/wiki/SortDependencies-->
              <sortDependencyExclusions/>
              <!-- Sort dependency exclusions: https://github.com/Ekryd/sortpom/wiki/SortDependencies-->
              <sortPlugins/>
              <!-- Sort plugins: https://github.com/Ekryd/sortpom/wiki/SortPlugins -->
              <sortProperties>true</sortProperties>
              <!-- Sort properties -->
              <sortModules>true</sortModules>
              <!-- Sort modules -->
              <sortExecutions>true</sortExecutions>
              <!-- Sort plugin executions -->
            </sortPom>
          </pom>
          <markdown>
            <includes>
              <!-- You have to set the target manually -->
              <include>**/*.md</include>
            </includes>
          </markdown>
          <json>
            <includes>
              <!-- You have to set the target manually -->
              <include>**/*.json</include>
            </includes>
            <excludes>
              <exclude>target/**</exclude>
              <exclude>node_modules/**</exclude>
              <exclude>tsconfig.json</exclude>
              <exclude>**/tsconfig.json</exclude>
              <exclude>package.json</exclude>
              <exclude>package-lock.json</exclude>
              <exclude>**/package.json</exclude>
              <exclude>**/package-lock.json</exclude>
            </excludes>
            <jackson/>
          </json>
          <typescript>
            <includes>
              <include>src/main/frontend/**/*.ts</include>
              <include>src/main/frontend/**/*.tsx</include>
            </includes>
            <excludes>
              <exclude>src/main/frontend/generated/**</exclude>
            </excludes>
            <prettier>
              <prettierVersion>3.3.3</prettierVersion>
              <configFile>${project.basedir}/.prettierrc.json</configFile>
            </prettier>
          </typescript>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>compile</phase>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>com.vaadin</groupId>
        <artifactId>vaadin-maven-plugin</artifactId>
        <version>${vaadin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-frontend</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-wrapper-plugin</artifactId>
        <version>3.3.2</version>
      </plugin>
    </plugins>
  </build>

  <profiles>
    <profile>
      <id>production</id>
      <dependencies>
        <!-- Exclude development dependencies from production -->
        <dependency>
          <groupId>com.vaadin</groupId>
          <artifactId>vaadin-core</artifactId>
          <exclusions>
            <exclusion>
              <groupId>com.vaadin</groupId>
              <artifactId>vaadin-dev</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>com.vaadin</groupId>
            <artifactId>vaadin-maven-plugin</artifactId>
            <version>${vaadin.version}</version>
            <executions>
              <execution>
                <goals>
                  <goal>build-frontend</goal>
                </goals>
                <phase>compile</phase>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>covergae</id>
      <build>
        <plugins>
          <!-- JaCoCo Code Coverage Plugin -->
          <plugin>
            <groupId>org.jacoco</groupId>
            <artifactId>jacoco-maven-plugin</artifactId>
            <version>${jacoco.version}</version>
            <configuration>
              <excludes>
                <!-- Exclude generated code -->
                <exclude>**/generated/**</exclude>
                <exclude>**/target/generated-sources/**</exclude>

                <!-- Exclude configuration and startup classes -->
                <exclude>**/Application.class</exclude>
                <exclude>**/config/**</exclude>
                <exclude>**/configuration/**</exclude>

                <!-- Exclude DTOs and simple data classes -->
                <exclude>**/*DTO.class</exclude>
                <exclude>**/*Request.class</exclude>
                <exclude>**/*Response.class</exclude>
                <exclude>**/*Properties.class</exclude>

                <!-- Exclude Vaadin UI components (hard to test) -->
                <exclude>**/ui/view/**</exclude>
                <exclude>**/ui/component/**</exclude>

                <!-- Exclude test utilities -->
                <exclude>**/TestcontainersConfiguration.class</exclude>

                <!-- Exclude Lombok generated methods -->
                <exclude>**/*$Builder.class</exclude>

                <!-- Exclude Mockito generated classes -->
                <exclude>**/*$MockitoMock$*</exclude>
                <exclude>**/*$MockitoMock$*$auxiliary$*</exclude>
                <exclude>**/*EnhancerByMockitoWithCGLIB*</exclude>

                <!-- Exclude JaCoCo runtime -->
                <exclude>**/org/jacoco/agent/rt/**</exclude>
              </excludes>
            </configuration>
            <executions>
              <!-- Prepare agent for unit tests -->
              <execution>
                <id>prepare-agent</id>
                <goals>
                  <goal>prepare-agent</goal>
                </goals>
                <configuration>
                  <propertyName>surefireArgLine</propertyName>
                </configuration>
              </execution>

              <!-- Prepare agent for integration tests -->
              <execution>
                <id>prepare-agent-integration</id>
                <goals>
                  <goal>prepare-agent-integration</goal>
                </goals>
                <configuration>
                  <propertyName>failsafeArgLine</propertyName>
                </configuration>
              </execution>

              <!-- Generate unit test coverage report -->
              <execution>
                <id>report</id>
                <goals>
                  <goal>report</goal>
                </goals>
                <phase>test</phase>
              </execution>

              <!-- Generate integration test coverage report -->
              <execution>
                <id>report-integration</id>
                <goals>
                  <goal>report-integration</goal>
                </goals>
                <phase>post-integration-test</phase>
              </execution>

              <!-- Coverage verification -->
              <execution>
                <id>check</id>
                <goals>
                  <goal>check</goal>
                </goals>
                <phase>verify</phase>
                <configuration>
                  <dataFile>${project.build.directory}/jacoco-merged.exec</dataFile>
                  <rules>
                    <rule>
                      <element>BUNDLE</element>
                      <limits>
                        <limit>
                          <counter>INSTRUCTION</counter>
                          <value>COVEREDRATIO</value>
                          <minimum>${jacoco.coverage.minimum}</minimum>
                        </limit>
                        <limit>
                          <counter>BRANCH</counter>
                          <value>COVEREDRATIO</value>
                          <minimum>${jacoco.coverage.minimum}</minimum>
                        </limit>
                      </limits>
                    </rule>
                    <rule>
                      <element>CLASS</element>
                      <limits>
                        <limit>
                          <counter>INSTRUCTION</counter>
                          <value>COVEREDRATIO</value>
                          <minimum>0.80</minimum>
                        </limit>
                      </limits>
                    </rule>
                  </rules>
                </configuration>
              </execution>

              <!-- Merge unit and integration test coverage -->
              <execution>
                <id>merge-results</id>
                <goals>
                  <goal>merge</goal>
                </goals>
                <phase>verify</phase>
                <configuration>
                  <fileSets>
                    <fileSet>
                      <directory>${project.build.directory}</directory>
                      <includes>
                        <include>jacoco.exec</include>
                        <include>jacoco-it.exec</include>
                      </includes>
                    </fileSet>
                  </fileSets>
                  <destFile>${project.build.directory}/jacoco-merged.exec</destFile>
                </configuration>
              </execution>

              <!-- Generate merged coverage report -->
              <execution>
                <id>report-merged</id>
                <goals>
                  <goal>report</goal>
                </goals>
                <phase>verify</phase>
                <configuration>
                  <dataFile>${project.build.directory}/jacoco-merged.exec</dataFile>
                  <outputDirectory>${project.reporting.outputDirectory}/jacoco-merged</outputDirectory>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
    <profile>
      <id>integration-test</id>
      <build>
        <plugins>
          <!-- Run integration tests with Surefire (sequential for safety) -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <!-- Disable parallel execution for integration tests -->
              <parallel>none</parallel>
              <threadCount>1</threadCount>
              <!-- Include integration tests -->
              <includes>
                <include>**/*IT.java</include>
                <include>**/*IntegrationTest.java</include>
              </includes>
              <excludes>
                <exclude>**/*Test.java</exclude>
                <exclude>**/*Tests.java</exclude>
                <exclude>**/*TestCase.java</exclude>
              </excludes>
              <!-- JVM arguments for integration tests with JaCoCo coverage -->
              <argLine>${failsafeArgLine} -Xmx3g
                -XX:+EnableDynamicAgentLoading
                -Djdk.instrument.traceUsage=false
                -DNOTION_TOKEN=${NOTION_TOKEN}</argLine>
            </configuration>
          </plugin>
          <!-- Failsafe plugin for additional integration test support -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <trimStackTrace>false</trimStackTrace>
              <enableAssertions>true</enableAssertions>
              <!-- Sequential execution for integration tests -->
              <parallel>none</parallel>
              <threadCount>1</threadCount>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>integration-test</goal>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Coverage Profile - Enables coverage verification -->
    <profile>
      <id>coverage</id>
      <properties>
        <!-- Enable coverage verification for this profile -->
        <jacoco.skip>false</jacoco.skip>
      </properties>
    </profile>
  </profiles>
</project>
